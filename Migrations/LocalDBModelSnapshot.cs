// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReadAndVerify.Data;

#nullable disable

namespace ReadAndVerify.Migrations
{
    [DbContext(typeof(LocalDB))]
    partial class LocalDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ReadAndVerify.Models.ChipProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("LocksAreShared")
                        .HasColumnType("bit");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SupportsUserMemory")
                        .HasColumnType("bit");

                    b.Property<string>("TidMask")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChipProfile");
                });

            modelBuilder.Entity("ReadAndVerify.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("ReadAndVerify.Models.Reader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Readers");
                });

            modelBuilder.Entity("ReadAndVerify.Models.RfidTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccessLock")
                        .HasColumnType("int");

                    b.Property<int>("ChipTypeId")
                        .HasColumnType("int");

                    b.Property<string>("EPC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EpcLock")
                        .HasColumnType("int");

                    b.Property<int?>("KillLock")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReadTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReaderId")
                        .HasColumnType("int");

                    b.Property<int>("RssiCurrent")
                        .HasColumnType("int");

                    b.Property<int>("RssiMax")
                        .HasColumnType("int");

                    b.Property<int>("RssiMin")
                        .HasColumnType("int");

                    b.Property<string>("TID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserLock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChipTypeId");

                    b.HasIndex("ReaderId");

                    b.ToTable("RfidTags");
                });

            modelBuilder.Entity("ReadAndVerify.Models.Reader", b =>
                {
                    b.HasOne("ReadAndVerify.Models.Location", "Location")
                        .WithMany("Readers")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ReadAndVerify.Models.RfidTag", b =>
                {
                    b.HasOne("ReadAndVerify.Models.ChipProfile", "ChipType")
                        .WithMany()
                        .HasForeignKey("ChipTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadAndVerify.Models.Reader", "Reader")
                        .WithMany("TagsRead")
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChipType");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("ReadAndVerify.Models.Location", b =>
                {
                    b.Navigation("Readers");
                });

            modelBuilder.Entity("ReadAndVerify.Models.Reader", b =>
                {
                    b.Navigation("TagsRead");
                });
#pragma warning restore 612, 618
        }
    }
}
