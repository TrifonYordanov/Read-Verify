@using ReadAndVerify.Services
@using ReadAndVerify.DTOs
@using ReadAndVerify.Components.Pages.Locations
@using ReadAndVerify.Components.Shared
@inject ILocationService LocationService
@inject IReaderService ReaderService

<!-- Fondo oscuro -->
<div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5); z-index: 1050;">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content shadow-lg">

            <!-- HEADER -->
            <div class="modal-header">
                <h5 class="modal-title">@((Reader.Id == 0) ? "New Reader" : "Edit Reader")</h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>

            <!-- BODY -->
            <div class="modal-body">
                <div class="card-body">

                    <!-- Name -->
                    <div class="mt-3 d-flex align-items-center gap-2">
                        <label class="form-label mb-0" style="width: 100px;">Name:</label>
                        <input class="form-control" style="flex: 1;" @bind="Reader.Name" />
                    </div>

                    <!-- IP Address -->
                    <div class="mt-3 d-flex align-items-center gap-2">
                        <label class="form-label mb-0" style="width: 100px;">IP Address:</label>
                        <input class="form-control" style="flex: 1;" @bind="Reader.IpAddress" />
                    </div>

                    <!-- Location Select + Action Buttons -->
                    <div class="mt-3 d-flex align-items-center gap-2 flex-wrap">
                        <label class="form-label mb-0" style="width: 100px;">Location:</label>

                        <select class="form-select" style="flex: 1;" @bind="Reader.LocationName">
                            <option value="">Select a location</option>
                            @foreach (var location in Locations)
                            {
                                <option value="@location">@location</option>
                            }
                        </select>

                        <div class="d-flex gap-1">
                            <button class="btn btn-outline-success" title="Add new location" @onclick="ShowAddLocationModal">
                                <i class="bi bi-plus"></i>
                            </button>

                            @if (!string.IsNullOrWhiteSpace(Reader.LocationName))
                            {
                                <button class="btn btn-outline-warning" title="Edit location" @onclick="EditSelectedLocation">
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                                <button class="btn btn-outline-danger" title="Delete location" @onclick="AskToDeleteSelectedLocation">
                                    <i class="bi bi-trash"></i>
                                </button>
                            }
                        </div>
                    </div>

                </div>
            </div>

            <!-- FOOTER -->
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="Close">Cancelar</button>
                <button class="btn btn-primary" @onclick="SaveReaderAsync">Guardar</button>
            </div>
        </div>
    </div>
</div>

<AddLocationForm @ref="AddLocationRef" OnLocationAdded="OnLocationAdded" />
<ConfirmDialog @ref="ConfirmDialogRef"
               Title="Confirm delete"
               Message="Are you sure you want to delete this location?"
               OnConfirmed="DeleteSelectedLocationConfirmed" />

@code {
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public ReaderDTO? ReaderToEdit { get; set; }

    private ReaderDTO Reader { get; set; } = new();
    private IEnumerable<string> Locations = new List<string>();
    private AddLocationForm? AddLocationRef;
    private ConfirmDialog? ConfirmDialogRef;
    private int? LocationToDeleteId;

    protected override async Task OnParametersSetAsync()
    {
        await LoadLocationsAsync();

        if (ReaderToEdit is not null)
        {
            Reader = new ReaderDTO
            {
                Id = ReaderToEdit.Id,
                Name = ReaderToEdit.Name,
                IpAddress = ReaderToEdit.IpAddress,
                LocationName = ReaderToEdit.LocationName,
                ChipType = ReaderToEdit.ChipType
            };
        }
    }

    private async Task LoadLocationsAsync()
    {
        var result = await LocationService.GetAllLocationsAsync();
        Locations = result.Select(l => l.Name);
    }

    private async Task ShowAddLocationModal()
    {
        if (AddLocationRef is not null)
            await AddLocationRef.ShowAsync();
    }

    private async Task OnLocationAdded(string newLocationName)
    {
        await LoadLocationsAsync();
        Reader.LocationName = newLocationName;
    }

    private async Task SaveReaderAsync()
    {
        if (string.IsNullOrWhiteSpace(Reader.Name) || string.IsNullOrWhiteSpace(Reader.IpAddress))
            return;

        if (Reader.Id == 0)
            await ReaderService.CreateAsync(Reader);
        else
            await ReaderService.UpdateAsync(Reader);

        await Close();
    }

    private async Task Close()
    {
        await OnClose.InvokeAsync();
    }

    private async Task EditSelectedLocation()
    {
        var allLocations = await LocationService.GetAllLocationsAsync();
        var selected = allLocations.FirstOrDefault(l => l.Name == Reader.LocationName);

        if (selected is not null && AddLocationRef is not null)
        {
            await AddLocationRef.ShowAsync(selected);
        }
    }

    private async Task AskToDeleteSelectedLocation()
    {
        var allLocations = await LocationService.GetAllLocationsAsync();
        var selected = allLocations.FirstOrDefault(l => l.Name == Reader.LocationName);

        if (selected is not null && ConfirmDialogRef is not null)
        {
            LocationToDeleteId = selected.Id;
            ConfirmDialogRef.Show();
        }
    }

    private async Task DeleteSelectedLocationConfirmed()
    {
        if (LocationToDeleteId.HasValue)
        {
            await LocationService.DeleteLocationAsync(LocationToDeleteId.Value);
            Reader.LocationName = string.Empty;
            LocationToDeleteId = null;
            await LoadLocationsAsync();
        }
    }
}
